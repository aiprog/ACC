# Code auto-generated by ACC

.data

str1:
	.string "\n"
str0:
	.string "%d "

.text

.globl main
main:
	enter $108, $0
	popl %ebx
	popl %esi
	popl %edi
	pushl $0
	call time
	addl $4, %esp
	movl %eax, %ebx
	pushl %ebx
	call srand
	addl $4, %esp
	movl $0, -4(%ebp)
b17:
	cmpl $10, -4(%ebp)
	jge b18
	call rand
	addl $0, %esp
	movl %eax, %ebx
	movl %ebx, %eax
	movl $100, %ebx
	cdq
	idivl %ebx
	movl -4(%ebp), %eax
	movl %edx, -56(%ebp)
	movl $4, %edx
	imull %edx
	leal -44(%ebp), %ebx
	addl %eax, %ebx
	movl -56(%ebp), %eax
	movl %eax, (%ebx)
	movl -4(%ebp), %eax
	addl $1, %eax
	movl %eax, -4(%ebp)
	jmp b17
b18:
	leal -44(%ebp), %eax
	pushl $9
	pushl $0
	pushl %eax
	call quickSort
	addl $12, %esp
	movl $0, -4(%ebp)
b21:
	cmpl $10, -4(%ebp)
	jge b22
	leal str0, %eax
	movl %eax, -84(%ebp)
	movl -4(%ebp), %eax
	movl $4, %edx
	imull %edx
	leal -44(%ebp), %ebx
	addl %eax, %ebx
	movl (%ebx), %eax
	pushl %eax
	pushl -84(%ebp)
	call printf
	addl $8, %esp
	movl -4(%ebp), %eax
	addl $1, %eax
	movl %eax, -4(%ebp)
	jmp b21
b22:
	leal str1, %eax
	pushl %eax
	call printf
	addl $4, %esp
	movl $0, %eax
	jmp b16
b16:
	popl %edi
	popl %esi
	popl %ebx
	leave
	ret

.globl quickSort
quickSort:
	enter $124, $0
	popl %ebx
	popl %esi
	popl %edi
	movl 12(%ebp), %eax
	cmpl 16(%ebp), %eax
	jl b2
	jmp b1
b2:
	movl 12(%ebp), %eax
	movl %eax, -4(%ebp)
	movl 16(%ebp), %eax
	movl %eax, -8(%ebp)
	movl 12(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl (%ebx), %eax
	movl %eax, -12(%ebp)
b4:
	movl -4(%ebp), %eax
	cmpl -8(%ebp), %eax
	jge b5
b7:
	movl -4(%ebp), %eax
	cmpl -8(%ebp), %eax
	jge b8
	movl -8(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl (%ebx), %eax
	cmpl -12(%ebp), %eax
	jl b8
	movl -8(%ebp), %eax
	subl $1, %eax
	movl %eax, -8(%ebp)
	jmp b7
b8:
	movl -8(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl (%ebx), %eax
	movl %eax, -52(%ebp)
	movl -4(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl -52(%ebp), %eax
	movl %eax, (%ebx)
b11:
	movl -4(%ebp), %eax
	cmpl -8(%ebp), %eax
	jge b12
	movl -4(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl (%ebx), %eax
	cmpl -12(%ebp), %eax
	jg b12
	movl -4(%ebp), %eax
	addl $1, %eax
	movl %eax, -4(%ebp)
	jmp b11
b12:
	movl -4(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl (%ebx), %eax
	movl %eax, -92(%ebp)
	movl -8(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl -92(%ebp), %eax
	movl %eax, (%ebx)
	jmp b4
b5:
	movl -4(%ebp), %eax
	movl $4, %edx
	imull %edx
	movl 8(%ebp), %ebx
	addl %eax, %ebx
	movl -12(%ebp), %eax
	movl %eax, (%ebx)
	movl -4(%ebp), %eax
	subl $1, %eax
	pushl %eax
	pushl 12(%ebp)
	pushl 8(%ebp)
	call quickSort
	addl $12, %esp
	movl -4(%ebp), %eax
	addl $1, %eax
	pushl 16(%ebp)
	pushl %eax
	pushl 8(%ebp)
	call quickSort
	addl $12, %esp
b1:
	popl %edi
	popl %esi
	popl %ebx
	leave
	ret

